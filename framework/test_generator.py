import ruamel
from ruamel.yaml import YAML
import os
from shutil import rmtree
from getpass import getuser
from datetime import datetime
from yapsy.PluginManager import PluginManager
from termcolor import colored


def load_yaml(foo):
    yaml = YAML(typ="rt")
    yaml.default_flow_style = False
    yaml.allow_unicode = True
    try:
        with open(foo, "r") as file:
            return yaml.load(file)
    except ruamel.yaml.constructor.DuplicateKeyError as msg:
        print("error: ", msg)


def create_plugins(plugins_path):
    files = os.listdir(plugins_path)
    for i in files:
        if ('.py' in i) and (not i.startswith('.')):
            module_name = i[0:-3]
            f = open(plugins_path + '/' + module_name + '.yapsy-plugin', "w")
            f.write("[Core]\nName=" + module_name + "\nModule=" + module_name)
            f.close()


def generate_tests(yaml_dict, test_file_dir="bpu/"):
    """specify the location where the python test files are located for a
    particular module with the folder following / , Then load the plugins from
    the plugin directory and create the asm test files in a new directory.
    eg. module_class  = branch_predictor's object
        test_file_dir = bpu/
    """

    manager = PluginManager()
    manager.setPluginPlaces([test_file_dir])
    manager.collectPlugins()

    ## To-Do : find a way to send yaml_dict to the class. 

    dir_path = os.path.join(test_file_dir, 'tests')
    if (os.path.isdir(dir_path)) and os.path.exists(dir_path):
        rmtree(test_file_dir + "tests/")

    os.mkdir(test_file_dir + "tests/")
    # Loop around and find the plugins and writes the contents from the
    # plugins into an asm file
    for plugin in manager.getAllPlugins():
        _check = plugin.plugin_object.execute(yaml_dict)
        if _check:
            asm_body = plugin.plugin_object.generate_asm(yaml_dict)
            name = (str(plugin.plugin_object).split(".", 1))
            test_name = ((name[1].split(" ", 1))[0])
            os.mkdir('bpu/tests/' + test_name)
            f = open('bpu/tests/' + test_name + '/' + test_name + '.S', "w")
            asm = asm_header + asm_body + asm_footer
            f.write(asm)
            f.close()
        else:
            print("skipped ",
                  (((str(plugin.plugin_object).split(".", 1))[1]).split(" ",
                                                                        1))[0])


def validate_tests(yaml_dict, test_file_dir="bpu/"):
    manager = PluginManager()
    manager.setPluginPlaces([test_file_dir])
    manager.collectPlugins()
    pass_ct = 0
    fail_ct = 0
    tot_ct = 1
    for plugin in manager.getAllPlugins():
        name = (str(plugin.plugin_object).split(".", 1))
        test_name = ((name[1].split(" ", 1))[0])
        result = plugin.plugin_object.check_log(yaml_dict,
                                                log_file_path=test_file_dir +
                                                              'tests/' + test_name + '/log')
        if result is None:
            print(colored(".\tMinimal test:" + test_name + " Skipped", 'white'))
        elif result:
            print(colored(
                str(tot_ct) + ".\tMinimal test:" + test_name + " has passed",
                'green'))
            pass_ct += 1
            tot_ct += 1
        elif not result:
            print(colored(
                str(tot_ct) + ".\tMinimal test:" + test_name + " has failed",
                'red'))
            fail_ct += 1
            tot_ct += 1
    print("\n\nMinimal Verification Results\n" + "=" * 28)
    print("Total Tests : ", tot_ct - 1)
    print(
        colored(
            "Tests Passed : {} - [{} %]".format(
                pass_ct, 100 * pass_ct // (tot_ct - 1)), 'green'))
    print(
        colored(
            "Tests Failed : {} - [{} %]".format(
                fail_ct, 100 * fail_ct // (tot_ct - 1)), 'red'))


def generate_yaml(yaml_dict, work_dir="bpu/"):
    """
      updates the test_list.yaml file of rivercore with the loaction of the 
      tests generated by test_generator
    """

    file = open("path.txt", "r")
    _paths = (file.readlines())
    file.close()

    manager = PluginManager()
    manager.setPluginPlaces([work_dir])
    manager.collectPlugins()

    _path = river_path + "/mywork/"
    data = ""
    
    ## To-Do -> Create Yaml the proper way. Do not use strings!!

    for plugin in manager.getAllPlugins():
        test_exists = plugin.plugin_object.execute(yaml_dict)
        _name = (((str(plugin.plugin_object).split(".", 1))[1]).split(" ", 1))[0]
        current_dir = os.getcwd()+'/'
        path_to_tests = current_dir + work_dir + 'tests/' + _name + '/'
        if (test_exists):
            data = data + _name + ":\n"
            data = data + "  asm_file: " + path_to_tests + _name + ".S\n"
            data = data + "  cc: riscv64-unknown-elf-gcc\n"
            data = data + "  cc_args: \' -mcmodel=medany -static -std=gnu99 -O2 -fno-common -fno-builtin-printf -fvisibility=hidden \'\n"
            data = data + "  compile_macros: [XLEN=64]\n"
            data = data + "  extra_compile: []\n"
            data = data + "  generator: micro_arch_test_v0.0.1\n"
            data = data + "  include: [" + current_dir + "../env/ , " + current_dir + "../target/" + "]\n"
            data = data + "  linker_args: -static -nostdlib -nostartfiles -lm -lgcc -T\n"
            data = data + "  linker_file: "+ current_dir + "../target/link.ld\n"
            data = data + "  mabi: lp64\n"
            data = data + "  march: rv64imafdc\n"
            data = data + "  isa: rv64imafdc\n"
            data = data + "  result: Unknown\n"
            data = data + "  work_dir: " + path_to_tests +"\n\n"
        else:
            print('No test generated for '+ _name +', skipping it in test_list')

    with open( _path + 'test_list.yaml' , 'w') as outfile:
        outfile.write(data)

def main():
    global asm_header
    global asm_footer
    global river_path

    inp = "../target/default.yaml"  # yaml file containing configuration details
    inp_yaml = load_yaml(inp)

    # first line in path should be river cores's directory
    fi = open("path.txt", "r")
    river_path = (fi.readline()).strip('\n')
    fi.close()

    isa = inp_yaml['ISA']
    bpu = inp_yaml['branch_predictor']

    username = getuser()
    time = ((str(datetime.now())).split("."))[0]

    asm_header = "## Licensing information can be found at LICENSE.incore \n" \
                 + "## Test generated by user - " + str(username) + " at " \
                 + time + "\n"
    asm_header += "\n#include \"model_test.h\"\n#include \"arch_" \
                  + "test.h\"\nRVTEST_ISA(\"" + isa + "\")\n\n" \
                  + ".section .text.init\n.globl rvtest_entry_point" \
                  + "\nrvtest_entry_point:\nRVMODEL_BOOT\n" \
                  + "RVTEST_CODE_BEGIN\n\n"
    asm_footer = "\nRVTEST_CODE_END\nRVMODEL_HALT\n\nRVTEST_DATA_BEGIN" \
                 + "\n.align 4\nrvtest_data:\n.word 0xbabecafe\n" \
                 + "RVTEST_DATA_END\n\nRVMODEL_DATA_BEGIN\nRVMODEL_DATA_END\n"

    create_plugins(plugins_path='bpu/')
    generate_tests(yaml_dict=bpu, test_file_dir="bpu/")
    generate_yaml(yaml_dict=bpu, work_dir="bpu/")
    cwd = os.getcwd()
    os.chdir(river_path)  # change dir to river_core
    os.system("river_core compile -t mywork/test_list.yaml")
    # run tests in river_core
    os.chdir(cwd)  # get back to present dir
    validate_tests(yaml_dict=bpu, test_file_dir='bpu/')


if __name__ == "__main__":
    main()
