import ruamel
from ruamel.yaml import YAML
import os
from shutil import rmtree
from getpass import getuser
from datetime import datetime
from yapsy.PluginManager import PluginManager
from termcolor import colored, cprint


def load_yaml(foo):
    yaml = YAML(typ="rt")
    yaml.default_flow_style = False
    yaml.allow_unicode = True
    try:
        with open(foo, "r") as file:
            return yaml.load(file)
    except ruamel.yaml.constructor.DuplicateKeyError as msg:
        print("error: ", msg)


def create_plugins(plugins_path):
    files = os.listdir(plugins_path)
    for i in files:
        if ('.py' in i) and (not i.startswith('.')):
            module_name = i[0:-3]
            f = open(plugins_path + '/' + module_name + '.yapsy-plugin', "w")
            f.write("[Core]\nName=" + module_name + "\nModule=" + module_name)
            f.close()


def generate_tests(yaml_dict, test_file_dir="bpu/"):
    """specify the location where the python test files are located for a
    particular module with the folder following / , Then load the plugins from
    the plugin directory and create the asm test files in a new directory.
    eg. module_class  = branch_predictor's object
        test_file_dir = bpu/
    """

    manager = PluginManager()
    manager.setPluginPlaces([test_file_dir])
    manager.collectPlugins()

    dir_path = os.path.join(test_file_dir, 'tests')
    if (os.path.isdir(dir_path)) and os.path.exists(dir_path):
        rmtree(test_file_dir + "tests/")

    os.mkdir(test_file_dir + "tests/")
    # Loop around and find the plugins and writes the contents from the
    # plugins into an asm file
    for plugin in manager.getAllPlugins():
        asm_body = plugin.plugin_object.generate_asm(yaml_dict)
        if asm_body:
            name = (str(plugin.plugin_object).split(".", 1))
            test_name = ((name[1].split(" ", 1))[0])
            os.mkdir('bpu/tests/' + test_name)
            f = open('bpu/tests/' + test_name + '/' + test_name + '.S', "w")
            asm = asm_header + asm_body + asm_footer
            f.write(asm)
            f.close()
        else:
            print("skipped ",
                  (((str(plugin.plugin_object).split(".", 1))[1]).split(" ",
                                                                        1))[0])
            continue


def validate_tests(yaml_dict, test_file_dir="bpu/"):
    manager = PluginManager()
    manager.setPluginPlaces([test_file_dir])
    manager.collectPlugins()
    pass_ct = 0
    fail_ct = 0
    tot_ct = 1
    for plugin in manager.getAllPlugins():
        name = (str(plugin.plugin_object).split(".", 1))
        test_name = ((name[1].split(" ", 1))[0])
        result = plugin.plugin_object.check_log(yaml_dict,
                                                log_file_path=test_file_dir +
                                                'tests/' + test_name + '/log')
        if result and result is not None:
            print(colored(str(tot_ct) + ".\tminimal test:" + test_name + " has passed", 'green'))
            pass_ct += 1
            tot_ct += 1
        elif not result:
            print(colored(str(tot_ct) + ".\tminimal test:" + test_name + " has failed", 'red'))
            fail_ct += 1
            tot_ct += 1
    print("\n\nMinimal Verification Results\n" + "=" * 28)
    print("Total Tests : ", tot_ct-1)
    print(
        colored(
            "Tests Passed : {} - [{} %]".format(
                pass_ct, 100 * pass_ct // (tot_ct-1)), 'green'))
    print(
        colored(
            "Tests Failed : {} - [{} %]".format(
                fail_ct, 100 * fail_ct // (tot_ct-1)), 'red'))


def generate_yaml(yaml_dict, work_dir="bpu/"):
    """
      updates the test_list.yaml file of rivercore with the loaction of the 
      tests generated by test_generator
    """

    file = open("path.txt", "r")
    _paths = (file.readlines())
    file.close()

    manager = PluginManager()
    manager.setPluginPlaces([work_dir])
    manager.collectPlugins()
    
    ## the third line in path contains the path where the test_list.yaml will be found
    river_path = _paths[2].strip('\n')
    data = dict()
    
    for plugin in manager.getAllPlugins():
        asm_body = plugin.plugin_object.generate_asm(yaml_dict)
        _name = (((str(plugin.plugin_object).split(".", 1))[1]).split(" ", 1))[0]
        current_dir = os.getcwd()+'/'
        path_to_tests = current_dir + work_dir + _name + '/'
        if (asm_body):
            data[_name] = {
                    'asm_file' : path_to_tests + _name + '.S',
                    'cc' : 'riscv64-unknown-elf-gcc',
                    'cc_args' : ' -mcmodel=medany -static -std=gnu99 -O2 -fno-common -fno-builtin-printf -fvisibility=hidden ',
                    'compile_macros' : "[XLEN=64]", 
                    'extra_compile' : [],
                    'generator' : 'custom_micro_arch_test',
                    'include' : "[" + current_dir + '../env/ , ' + current_dir + '../target/' + "]",
                    'isa' : 'rv64imafdc',
                    'linker_args' : '-static -nostdlib -nostartfiles -lm -lgcc -T',
                    'linker_file' : current_dir + '../target/link.ld',
                    'mabi' : 'lp64',
                    'march' : 'rv64imafdc',
                    'result' : 'Unknown',
                    'work_dir' : path_to_tests,
                    }
        else:
            print('No test generated for '+_name+', skipping it in test_list')

    yaml = YAML()
    with open(river_path+'test_list.yaml','w') as outfile:
        yaml.default_flow_style = False
        yaml.allow_unicode = True
        yaml.dump(data, outfile)


def main():
    global asm_header
    global asm_footer
    global river_path

    inp = "../target/default.yaml"  # yaml file containing configuration details
    inp_yaml = load_yaml(inp)

    ## first line in path should be river cores's directory
    fi = open("path.txt", "r")
    river_path = (fi.readline()).strip('\n')
    fi.close()

    ## river_path = "/home/purushoth/incoresemi/river_core_quickstart"
    # "path/to/river_core"

    isa = inp_yaml['ISA']
    bpu = inp_yaml['branch_predictor']

    username = getuser()
    time = ((str(datetime.now())).split("."))[0]

    asm_header = "## Licensing information can be found at LICENSE.incore \n" \
                 + "## Test generated by user - " + str(username) + " at " \
                 + time + "\n"
    asm_header += "\n#include \"model_test.h\"\n#include \"arch_" \
                  + "test.h\"\nRVTEST_ISA(\"" + isa + "\")\n\n" \
                  + ".section .text.init\n.globl rvtest_entry_point" \
                  + "\nrvtest_entry_point:\nRVMODEL_BOOT\n" \
                  + "RVTEST_CODE_BEGIN\n\n"
    asm_footer = "\nRVTEST_CODE_END\nRVMODEL_HALT\n\nRVTEST_DATA_BEGIN" \
                 + "\n.align 4\nrvtest_data:\n.word 0xbabecafe\n" \
                 + "RVTEST_DATA_END\n\nRVMODEL_DATA_BEGIN\nRVMODEL_DATA_END\n"

    create_plugins(plugins_path='bpu/')
    generate_tests(yaml_dict=bpu, test_file_dir="bpu/")

    cwd = os.getcwd()
    os.chdir(river_path)  # change dir to river_core
    os.system("river_core compile -t mywork/test_list.yaml")
    # run tests in river_core
    os.chdir(cwd)  # get back to present dir
    validate_tests(yaml_dict=bpu, test_file_dir='bpu/')


if __name__ == "__main__":
    main()
