.. See LICENSE.incore for details

.. highlight:: shell

.. _configuration_files:

#######################
UTG Configuration Files
#######################

UTG makes use of 3 configuration files.

  1. ``config.ini`` - UTG Configuration file.
  2. ``dut_config.yaml`` - DUT Configuration file for test filtering.
  3. ``aliasing.yaml`` - File with alias for verilog signal names. (used
     when generating covergroups)

When specified, UTG also generates a ``test_list.yaml`` file along with the tests.

In this document, we try to explain the need to have these files as well throw 
some light on the format of these documents, so that the user can write/edit the
configuration file, as necessary.

============================
``config.ini`` Specification
============================

The ``config.ini`` file is used to specify the arguments required by UTG to 
generate tests. 

Configuration Options
---------------------

.. note:: Information about the ``dut_config.yaml``, ``aliasing.yaml`` and 
   ``test_list.yaml`` are provided in the following sections.

.. tabularcolumns:: |l|L|

.. table:: General Configuration Options

  =================== =========================================================
  Parameter           Description
  =================== =========================================================
  verbose             The verbosity of the log generated by the tool.
  clean               [Boolean] Option to clean the files created duting test
                      generation. Clean will clean up all files, including the 
                      tests.
  modules             The Modules of the DUT for which you wish to generate the 
                      tests. (will take multiple values)
  module_dir          **Absolute** path to the directory where the user has 
                      saved the tests for all modules.
  work_dir            The workdir where all of the files, reports and logs are 
                      generated.
  linker_dir          The directory where the user has stored his ``link.ld`` file.
                      If not specified, UTG will generate a linker at the work_dir.
  dut_config          The **absolute** path to the ``dut_config.yaml`` file of 
                      the DUT for which the user wants to generate tests. 
  alias_file          The **absolute** path to the ``aliasing.yaml`` file of 
                      the DUT for which the user wants to generate covergroups.       
  gen_test_list       [Boolean] Creates a ``test_list.yaml`` file in the 
                      ``work_dir``.
  gen_test            [Boolean] UTG generates tests only when this is True. Else, 
                      UTG does nothing.
  val_test            [Boolean] When True, UTG will check the log generated from 
                      the DUT against known log patterns to obtain an intial 
                      report of test coverage.
  gen_cvg             [Boolean] When True, UTG will generate the covergroups for 
                      the tests.
  =================== =========================================================

.. note:: The standard delimiter for options having multiple values is **,**
    (comma).

Sample ``config.ini``
---------------------

.. code-block:: ini

    [utg]

    # [info, error, debug] set verbosity level to view different levels of messages.
    verbose = debug
    # [True, False] the clean flag removes unnecessary files from the previous runs and cleans directories
    clean = 

    # Enter the modules whose tests are to be generated/validated in comma separated format.
    # Run 'utg --list-modules to find all the modules that are supported. '
    # Use 'all' to generate/validate all modules
    modules = all

    # Absolute path of the uarch_modules/modules Directory
    module_dir = /home/akrish/work/InCore/chromite_uarch_tests/modules/
    # Directory to dump assembly files and reports
    work_dir = /home/akrish/work/InCore/micro-arch-tests/work
    # location to store the link.ld linker file. By default it's same as work_dir
    linker_dir = /home/akrish/work/InCore/micro-arch-tests/work

    # Path of the yaml file containing DUT Configuration.
    # By default the configuration is "utg/target/dut_config.yaml"
    dut_config = /home/akrish/work/InCore/micro-arch-tests/utg/target/dut_config.yaml
    # Absolute Path of the yaml file containing the signal aliases of the DUT
    # presently it is stored in 'uarch_modules/aliasing.yaml'
    alias_file = /home/akrish/work/InCore/chromite_uarch_tests/aliasing.yaml

    # [True, False] If the gen_test_list flag is True, the test_list.yaml needed for running tests in river_core are generated automatically.
    # Until you want to validate individual tests in river_core set the flag to True
    gen_test_list = True
    # [True, False] If the gen_test flag is True, assembly files are generated/overwritten
    gen_test = True
    # [True, False] If the val_test flag is True, assembly files are executed and the modules are validated
    val_test = 
    # [True, False] If the gen_cvg flag is True, System Verilog cover-groups are generated
    gen_cvg = True

   
=================================
``dut_config.yaml`` Specification
=================================

===============================
``aliasing.yaml`` Specification
===============================

================================
``test_list.yaml`` Specification
================================

When gen_test_list is true in the ``config.ini`` or when ``-t`` is passed 
with the ``utg generate`` command, UTG, apart from generating just the
test artifacts, must also generate a test list YAML. The test list has the
following syntax:

.. code-block:: yaml

   <test-name>:
    asm_file: <path to assembly/C/test file generated>
    cc: <optional compile command to be used to compile the tests>
    ccargs: <optional compile arguments to be used>
    extra_compile: [<list of supplementary files to be compiled. Provided as absolute paths>]
    include: [<list of directories containing any required header file>]
    isa: <the isa string for which this test was generated for>
    linker_args: <arguments to be provided to the linker command>
    linker_file: <absolute path of the linker file to be used>
    result: <set to Unvailable during generation. Will change to Pass or Fail based on the simulation runs>
    generator: <name of the generator plugin used to generate this test>
    march: <the march argument to be supplied to the compiler>
    mabi: <the mabi argument to be supplied to the compiler>
    compile_macros: <list of strings indicating compile time macros that need to be enabled>

.. note:: While we capture the ISA, it may seem redundant to capture the march
   and mabi. However, the tests can be generated to check a subset features like
   - no compressed instructions in targets which do support compressed
   instructions. Hence the redundancy. 

.. note:: cc and ccargs are optional here because typically the target/DUT will
   have its own compiler and toolchain setup and may ignore these fields. Also
   most of the test generators are independent of the choice of toolchain and
   may leave these fields blank.

.. warning:: All the files contain an *absolute* path.

